[tool.poetry]
name = "secret-santa"
version = "0.1.0"
description = "A Secret Santa game which randomly assigns and notifies people to whom they should give a gift using Twilio's messaging API"
license = "Unlicense"
authors = ["Fawzi Abo Shkara <fawzi.aboshkara@gmail.com>"]
readme = "README.md"
homepage = "https://github.com/faboshka/secret-santa"
repository = "https://github.com/faboshka/secret-santa.git"

[tool.poetry.dependencies]
python = "^3.12"
python-dotenv = "^1.0.0"
twilio = "^8.11.0"
pyfiglet = "^1.0.2"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
taskipy = "^1.12.0"
pytest-lazy-fixture = "^0.6.3"
pytest-mock = "^3.11.1"
mypy = "^1.5.1"
types-pytest-lazy-fixture = "^0.6.3.4"
ruff = "^0.1.11"

[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    "W",
    # isort
    "I",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
pretty = true
show_error_context = true

check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = true
disallow_subclassing_any = true

warn_return_any = true
warn_unused_ignores = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = ["pyfiglet", "twilio.rest.*"]
ignore_missing_imports = true

[tool.taskipy.variables]
all_paths = "secret_santa/ tests/"
sources_only = "secret_santa/"
tests_only = "tests/"

[tool.taskipy.tasks]
format_check = { cmd = "task format --check", use_vars = true, help = "run ruff format on sources and tests in check mode (no writing back)." }
ruff_lint = { cmd = "ruff check {all_paths}", use_vars = true, help = "run ruff linter on sources and tests." }
ruff_lint_fix = { cmd = "task ruff_lint --fix", use_vars = true, help = "[changes code] run ruff linter and fix fixable issues on sources and tests." }
mypy = { cmd = "mypy {all_paths}", use_vars = true, help = "run mypy on sources." }

format = { cmd = "ruff format {all_paths}", use_vars = true, help = "[changes code] run ruff format on sources and tests." }
lint = { cmd = "task format_check && task ruff_lint && task mypy", help = "check code formatting and rules violations." }
fix = { cmd = "task format && task ruff_lint_fix", help = "[changes code] reformat code and fix fixable linting issues." }
test = { cmd = "pytest -v {tests_only}", use_vars = true, help = "run all tests." }
